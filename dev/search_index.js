var documenterSearchIndex = {"docs":
[{"location":"alldocstrings/#All-Docstrings","page":"All docstrings","title":"All Docstrings","text":"","category":"section"},{"location":"alldocstrings/","page":"All docstrings","title":"All docstrings","text":"CurrentModule = LyoPronto","category":"page"},{"location":"alldocstrings/#Types","page":"All docstrings","title":"Types","text":"","category":"section"},{"location":"alldocstrings/","page":"All docstrings","title":"All docstrings","text":"Modules = [LyoPronto]\nPages = [\"structs.jl\"]","category":"page"},{"location":"alldocstrings/#LyoPronto.RampedVariable","page":"All docstrings","title":"LyoPronto.RampedVariable","text":"A convenience type for computing temperatures, pressures, etc. with multiple setpoints in sequence,  and linear interpolation according to a fixed ramp rate between set points\n\nThree main constructors are available: For a non-varying value, call with one argument: RampedVariable(constant_setpt) For one ramp from initial value to set point with indefinite hold, call with two arguments: RampedVariable(setpts, ramprate) And for multiple setpoints, call with three arguments: RampedVariable(setpts, ramprates, holds)\n\nWith three arguments, setpts, ramprates, and holds should all be vectors, with lengths N+1, N, N-1 respectively.\n\nThe resulting RampedVariable rv = RampedVariable(...) can be called as rv(x) at any value of x,  and will return the value at that time point along the ramp process.\n\n\n\n\n\n","category":"type"},{"location":"alldocstrings/#LyoPronto.RpFormFit","page":"All docstrings","title":"LyoPronto.RpFormFit","text":"A convenience type for dealing with the common functional form given to Rp and Kv.\n\nAn object Rp = RpFormFit(A, B, C) can be called as Rp(x), which simply computes A + B*x/(1 + C*x). Likewise, Kv = RpFormFit(Kc, Kp, Kd) can be called as Kv(p) to get Kc + Kp*p/(1 + Kd*p).\n\n\n\n\n\n","category":"type"},{"location":"alldocstrings/#Parameter-Fitting","page":"All docstrings","title":"Parameter Fitting","text":"","category":"section"},{"location":"alldocstrings/","page":"All docstrings","title":"All docstrings","text":"Modules = [LyoPronto]\nPages = [\"paramfits.jl\"]","category":"page"},{"location":"alldocstrings/#LyoPronto.gen_sol_conv_dim-NTuple{4, Any}","page":"All docstrings","title":"LyoPronto.gen_sol_conv_dim","text":"gen_sol_conv_dim(KRp_prm, otherparams, u0, tspan; kwargs...)\n\nSolve the Pikal model for primary drying with given Kv & Rp, returning the solution object and the set of parameters passed to solve.\n\notherparams contains: (hf0, c_solid, ρ_solution, Av, Ap, pch, Tsh)\nu0 is given as floats (not Unitful quantities), with dimensions [cm, K].\nKRp_prm has the form [Kv, R0, A1, A2]; this function assigns the units [W/m^2/K, cm^2Torrhr/g, cmTorrhr/g, 1/cm] to those numbers\nkwargs is passed directly (as is) to the ODE solve call.\n\nThis is used as a helper for obj_tT_conv to assemble a function which takes [Kv, R0, A1, A2] and returns sum squared error against experiment. To that end, use this to make an anonymous function of the form gen_sol = x->gen_sol_conv_dim(x, case_params, case_u0, case_tspan). That function is what you will pass to obj_tT_conv.\n\n\n\n\n\n","category":"method"},{"location":"alldocstrings/#LyoPronto.gen_sol_rf_dim-NTuple{4, Any}","page":"All docstrings","title":"LyoPronto.gen_sol_rf_dim","text":"gen_sol_rf_dim(fitprm, params_bunch, u0, tspan; kwargs...)\n\nSolve the lumped-capacitance model for microwave-assisted primary drying with given fit parameters, returning the solution object and the set of parameters passed to solve.\n\nfitprm has the form [α, Kvwf, Bf, Bvw]; this function assigns the units [cm^1.5, cal/s/K/cm^2, Ω/m^2, Ω/m^2] to those numbers.\nparams_bunch contains a full listing of parameters used for the model, according to lumped_cap_rf, including dummy values for the fit parameters.\nu0 is given as floats (not Unitful quantities), with dimensions [g, K, K].\nkwargs is passed directly (as is) to the ODE solve call.\n\nThis is used as a helper for obj_tT_rf, obj_tTT_rf, obj_ttTT_rf to assemble a function which takes [α, Kvwf, Bf, Bvw] and returns sum squared error against experiment. To that end, use this to make an anonymous function of the form gen_sol = x->gen_sol_rf_dim(x, case_params, case_u0, case_tspan). That function is what you will pass to obj_tT_rf (or similar).\n\n\n\n\n\n","category":"method"},{"location":"alldocstrings/#LyoPronto.obj_tTT_rf-Tuple{Any, Any, Any}","page":"All docstrings","title":"LyoPronto.obj_tTT_rf","text":"obj_tTT_rf(fitprm, gen_sol, tTTdat; t_end=0.0u\"hr\", tweight=1, verbose=true)\n\nEvaluate an objective function which compares model solution with fitprm to experimental data in tTTdat.\n\ngen_sol is a function taking [α, Kvwf, Bf, Bvw] and returning a solution to lumped-capacitance microwave-assisted model; see gen_sol_rf_dim.\ntTTdat is experimental temperature series, of the form (time, Tf, Tvw), so with frozen and vial wall temperatures taken at the same time points.    See also obj_tT_rf and obj_ttTT_rf.\ntweight gives the weighting (in K^2/hr^2) of the end of drying in the objective, as compared to the temperature error.\nt_end has a default value of 0.0u\"hr\", which (if left at default) is replaced with the last given time point.\n\n\n\n\n\n","category":"method"},{"location":"alldocstrings/#LyoPronto.obj_tT_conv-Tuple{Any, Any, Any}","page":"All docstrings","title":"LyoPronto.obj_tT_conv","text":"obj_tT_conv(KRp_prm, gen_sol, tTdat; t_end=0.0u\"hr\", tweight=1, verbose = true)\n\nEvaluate an objective function which compares model solution with KRp_prm to experimental data in tTdat.\n\nArguments:\n\ngen_sol is a function taking [Kv, R0, A1, A2] and returning a solution to Pikal model; see gen_sol_conv_dim.\ntTdat is experimental temperature series, of the form (time, Tf).\ntweight gives the weighting (in K^2/hr^2) of the end of drying in the objective, as compared to the temperature error.\nt_end has a default value of 0.0u\"hr\", which (if left at default) is replaced with the last time point.\nverbose defaults to true, in which case each call to this function prints info on the passed parameters, etc.\n\n\n\n\n\n","category":"method"},{"location":"alldocstrings/#LyoPronto.obj_tT_rf-Tuple{Any, Any, Any}","page":"All docstrings","title":"LyoPronto.obj_tT_rf","text":"obj_tT_rf(fitprm, gen_sol, tTdat; t_end=0.0u\"hr\", tweight=1, Tvw_end = 0.0u\"K\", verbose=true)\n\nEvaluate an objective function which compares model solution with fitprm to experimental data in tTdat.\n\ngen_sol is a function taking [α, Kvwf, Bf, Bvw] and returning a solution to lumped-capacitance microwave-assisted model; see gen_sol_rf_dim.\ntTTdat is experimental temperature series, of the form (time, Tf), so with frozen temperatures only.    See also obj_tTT_rf and obj_ttTT_rf.\nTvw_end defaults to 0.0u\"K\", in which case vial wall temperatures are excluded from the objective.    If another value is passed, then the final model vial wall temperature is compared to that value and included in the objective.\ntweight gives the weighting (in K^2/hr^2) of the end of drying in the objective, as compared to the temperature error.\nt_end has a default value of 0.0u\"hr\", which (if left at default) is replaced with the last given time point.\n\n\n\n\n\n","category":"method"},{"location":"alldocstrings/#LyoPronto.obj_ttTT_rf-Tuple{Any, Any, Any}","page":"All docstrings","title":"LyoPronto.obj_ttTT_rf","text":"obj_ttTT_rf(fitprm, gen_sol, tTTdat; t_end=0.0u\"hr\", tweight=1, verbose=true)\n\nEvaluate an objective function which compares model solution with fitprm to experimental data in tTdat.\n\ngen_sol is a function taking [α, Kvwf, Bf, Bvw] and returning a solution to lumped-capacitance microwave-assisted model; see gen_sol_rf_dim.\ntTTdat is experimental temperature series, of the form (time_Tf, time_vw, Tf, Tvw), so with Tf and Tvw having separate time points.    This is useful if there is an early temperature rise in Tf, but Tvw continues to be reliable, so the model can fit to as much of Tvw as reasonable.   See also obj_tTT_rf and obj_tT_rf.\ntweight gives the weighting (in K^2/hr^2) of the end of drying in the objective, as compared to the temperature error.\nt_end has a default value of 0.0u\"hr\", which (if left at default) is replaced with the last given time point.\n\n\n\n\n\n","category":"method"},{"location":"alldocstrings/#Plot-Recipes","page":"All docstrings","title":"Plot Recipes","text":"","category":"section"},{"location":"alldocstrings/","page":"All docstrings","title":"All docstrings","text":"Modules = [LyoPronto]\nPages = [\"recipes.jl\"]","category":"page"},{"location":"alldocstrings/#LyoPronto.qrf_integrate-Tuple{Any, Any}","page":"All docstrings","title":"LyoPronto.qrf_integrate","text":"qrf_integrate(sol, RF_params)\n\nCompute the integral over time of each heat transfer mode in the lumped capacitance model.\n\nReturns as a Dict{String, Quantity{...}}, with string keys Qsub, Qshf, Qvwf, QRFf, QRFvw.\n\n\n\n\n\n","category":"method"},{"location":"alldocstrings/#LyoPronto.tendplot","page":"All docstrings","title":"LyoPronto.tendplot","text":"tendplot(t_end)\ntendplot!(t_end)\n\nPlot recipe that adds a labeled vertical line to the plot at time t_end.  A default label and styling are applied, but these can be modified by keyword arguments as usual\n\n\n\n\n\n","category":"function"},{"location":"alldocstrings/#LyoPronto.tendplot!","page":"All docstrings","title":"LyoPronto.tendplot!","text":"tendplot(t_end)\ntendplot!(t_end)\n\nPlot recipe that adds a labeled vertical line to the plot at time t_end.  A default label and styling are applied, but these can be modified by keyword arguments as usual\n\n\n\n\n\n","category":"function"},{"location":"alldocstrings/#LyoPronto.tplotexperimental","page":"All docstrings","title":"LyoPronto.tplotexperimental","text":"tplotexperimental(time, T1, [T2, ...])\ntplotexperimental!(time, T1, [T2, ...])\n\nPlot recipe for one or more experimentally measured product temperatures, all at same times. This recipe adds one series for each passed temperature series, so pass labels as appropriate.\n\n\n\n\n\n","category":"function"},{"location":"alldocstrings/#LyoPronto.tplotexperimental!","page":"All docstrings","title":"LyoPronto.tplotexperimental!","text":"tplotexperimental(time, T1, [T2, ...])\ntplotexperimental!(time, T1, [T2, ...])\n\nPlot recipe for one or more experimentally measured product temperatures, all at same times. This recipe adds one series for each passed temperature series, so pass labels as appropriate.\n\n\n\n\n\n","category":"function"},{"location":"alldocstrings/#LyoPronto.tplotexpvw","page":"All docstrings","title":"LyoPronto.tplotexpvw","text":"tplotexpvw(time, temperature)\ntplotexpvw!(time, temperature)\n\nPlot recipe for a set of experimentally measured vial wall temperatures. This recipe adds only one series to the plot.\n\n\n\n\n\n","category":"function"},{"location":"alldocstrings/#LyoPronto.tplotexpvw!","page":"All docstrings","title":"LyoPronto.tplotexpvw!","text":"tplotexpvw(time, temperature)\ntplotexpvw!(time, temperature)\n\nPlot recipe for a set of experimentally measured vial wall temperatures. This recipe adds only one series to the plot.\n\n\n\n\n\n","category":"function"},{"location":"alldocstrings/#LyoPronto.tplotmodelconv","page":"All docstrings","title":"LyoPronto.tplotmodelconv","text":"tplotmodelconv(sols)\ntplotmodelconv!(sols)\n\nPlot recipe for one or multiple solutions to the Pikal model, e.g. the output of gen_sol_conv_dim. This adds one series to the plot for each passed solution, so pass as many labels (e.g. [\"Tf1\" \"Tf2\"]) to this plot call as solutions to add labels to the legend.\n\n\n\n\n\n","category":"function"},{"location":"alldocstrings/#LyoPronto.tplotmodelconv!","page":"All docstrings","title":"LyoPronto.tplotmodelconv!","text":"tplotmodelconv(sols)\ntplotmodelconv!(sols)\n\nPlot recipe for one or multiple solutions to the Pikal model, e.g. the output of gen_sol_conv_dim. This adds one series to the plot for each passed solution, so pass as many labels (e.g. [\"Tf1\" \"Tf2\"]) to this plot call as solutions to add labels to the legend.\n\n\n\n\n\n","category":"function"},{"location":"alldocstrings/#LyoPronto.tplotmodelrf","page":"All docstrings","title":"LyoPronto.tplotmodelrf","text":"tplotmodelrf(sol)\ntplotmodelrf!(sol)\n\nPlot recipe for one solution to the lumped capacitance model, e.g. the output of gen_sol_rf_dim. This adds two series to the plot, so pass two labels (e.g. [\"Tf\" \"Tvw\"]) to this plot call to add labels to the legend.\n\n\n\n\n\n","category":"function"},{"location":"alldocstrings/#LyoPronto.tplotmodelrf!","page":"All docstrings","title":"LyoPronto.tplotmodelrf!","text":"tplotmodelrf(sol)\ntplotmodelrf!(sol)\n\nPlot recipe for one solution to the lumped capacitance model, e.g. the output of gen_sol_rf_dim. This adds two series to the plot, so pass two labels (e.g. [\"Tf\" \"Tvw\"]) to this plot call to add labels to the legend.\n\n\n\n\n\n","category":"function"},{"location":"alldocstrings/#Vial-Dimensions","page":"All docstrings","title":"Vial Dimensions","text":"","category":"section"},{"location":"alldocstrings/","page":"All docstrings","title":"All docstrings","text":"Modules = [LyoPronto]\nPages = [\"get_vial_dims.jl\"]","category":"page"},{"location":"alldocstrings/#LyoPronto.get_vial_mass-Tuple{String}","page":"All docstrings","title":"LyoPronto.get_vial_mass","text":"get_vial_mass(vialsize::String)\n\nReturn vial mass for given ISO vial size.\n\nUses a table provided by Schott, stored internally in a CSV.\n\n\n\n\n\n","category":"method"},{"location":"alldocstrings/#LyoPronto.get_vial_radii-Tuple{String}","page":"All docstrings","title":"LyoPronto.get_vial_radii","text":"get_vial_radii(vialsize::String)\n\nReturn inner and outer radius for passed ISO vial size.\n\nUses a table provided by Schott, stored internally in a CSV.\n\n\n\n\n\n","category":"method"},{"location":"alldocstrings/#LyoPronto.get_vial_shape-Tuple{String}","page":"All docstrings","title":"LyoPronto.get_vial_shape","text":"get_vial_shape(vialsize::String)\n\nReturn a Dict{Symbol, Any} with a slew of vial dimensions, useful for drawing the shape of the vial with make_outlines.\n\n\n\n\n\n","category":"method"},{"location":"alldocstrings/#LyoPronto.get_vial_thickness-Tuple{String}","page":"All docstrings","title":"LyoPronto.get_vial_thickness","text":"get_vial_thickness(vialsize::String)\n\nReturn vial wall thickness for given ISO vial size.\n\nUses a table provided by Schott, stored internally in a CSV.\n\n\n\n\n\n","category":"method"},{"location":"alldocstrings/#LyoPronto.make_outlines-Tuple{Any, Any}","page":"All docstrings","title":"LyoPronto.make_outlines","text":"make_outlines(dims, Vfill)\n\nReturn a sequence of points (ready to be made into Plots.Shapes for the vial and fill volume, with Unitful dimensions, for given vial dimensions.\n\nThis is a convenience function for making figures illustrating fill depth.\n\n\n\n\n\n","category":"method"},{"location":"alldocstrings/#Model-Equations","page":"All docstrings","title":"Model Equations","text":"","category":"section"},{"location":"alldocstrings/","page":"All docstrings","title":"All docstrings","text":"Modules = [LyoPronto]\nPages = [\"model.jl\"]","category":"page"},{"location":"alldocstrings/#LyoPronto.end_drying_callback","page":"All docstrings","title":"LyoPronto.end_drying_callback","text":"A callback for use in simulating either the Pikal or RF model.\n\nTerminates the time integration when end_cond evaluates to true.\n\n\n\n\n\n","category":"constant"},{"location":"alldocstrings/#LyoPronto.calc_psub-Tuple{F} where F<:Number","page":"All docstrings","title":"LyoPronto.calc_psub","text":"calc_psub(T::F) where F<:Number\ncalc_psub(T::Q) where Q<:Quantity\n\nCompute pressure (in Pascals) of sublimation at temperature T in Kelvin.\n\nThis is essentially an Arrhenius fit, where we compute: psub = pref * exp(-ΔHsub*Mw / R T)\n\n\n\n\n\n","category":"method"},{"location":"alldocstrings/#LyoPronto.end_cond-Tuple{Any, Any, Any}","page":"All docstrings","title":"LyoPronto.end_cond","text":"end_cond(u, t, integ)\n\nCompute the end condition for primary drying (that mf or hf approaches zero).\n\n\n\n\n\n","category":"method"},{"location":"alldocstrings/#LyoPronto.lumped_cap_rf-Tuple{Any, Any, Any}","page":"All docstrings","title":"LyoPronto.lumped_cap_rf","text":"lumped_cap_rf(u, params, tn)\n\nCompute the right-hand-side function for the ODEs making up the lumped-capacitance microwave-assisted model.\n\nSpecifically, this is [dmf/dt, dTf/dt, dTvw/dt] given u = [mf, Tf, Tvw]. u is taken without units but assumed to have the units of [g, K, K] (which is internally added). tn is assumed to be in hours (internally added), so dudt is returned with units [g/hr, K/hr, K/hr] to be consistent.\n\nThe full set of necessary parameters is given in the form of a tuple-of-tuples:\n\nparams = (   \n    (Rp, h_f0, cSolid, ρ_solution),\n    (K_shf_f, A_v, A_p),\n    (pch, Tsh, P_per_vial),\n    (m_f0, cp_f, m_v, cp_v, A_rad),\n    (f_RF, epp_f, epp_vw),\n    (alpha, K_vwf, B_f, B_vw),\n)\n\nThese should all be Unitful quantities with appropriate dimensions, with some exceptions which are callables returning quantities. See RpFormFit and `RampedVariable for convenience types that can help with these cases.\n\nRp(x) with x a length returns mass transfer resistance (as a Unitful quantity)\nK_shf_f(p) with p a pressure returns heat transfer coefficient (as a Unitful quantity).\nTsh(t), pch(t), P_per_vial(t) return shelf temperature, chamber pressure, and microwave power respectively at time t.\n\nFor implementation details, see lumped_cap_rf_model.\n\n\n\n\n\n","category":"method"},{"location":"alldocstrings/#LyoPronto.lumped_cap_rf_model-Tuple{Any, Any, Any}","page":"All docstrings","title":"LyoPronto.lumped_cap_rf_model","text":"lumped_cap_rf_model(u, params, tn)\n\nThis does the work for lumped_cap_rf, but returns dudt,  [Q_sub, Q_shf, Q_vwf, Q_RF_f, Q_RF_vw, Q_shw] with Q_... as Unitful quantities in watts.  The extra results are helpful in investigating the significance of the various heat transfer modes.\n\n\n\n\n\n","category":"method"},{"location":"alldocstrings/#LyoPronto.lyo_1d_dae!-NTuple{4, Any}","page":"All docstrings","title":"LyoPronto.lyo_1d_dae!","text":"lyo_1d_dae!(du, u, params, t)\n\nInternal implementation of the Pikal model. See lyo_1d_dae_f for the wrapped version, which is more fully documented.\n\n\n\n\n\n","category":"method"},{"location":"alldocstrings/#LyoPronto.lyo_1d_dae_f","page":"All docstrings","title":"LyoPronto.lyo_1d_dae_f","text":"lyo_1d_dae_f = ODEFunction(lyo_1d_dae!, mass_matrix=lyo_1d_mm)\n\nCompute the right hand side function for the Pikal model.\n\nThe DAE system which is the Pikal model (1 ODE, one nonlinear algebraic equation for pseudosteady conditions) is here treated as a constant-mass-matrix implicit ODE system. The implementation is in lyo_1d_dae!\n\nThe initial conditions u0 = [h_f, Tf] should be unitless, but are internally assigned to be in [cm, K]. The unitless time is taken to be in hours, so derivatives are given in unitless [cm/hr, K/hr].\n\nparams has the form:\n\nparams = (\n    (Rp, hf0, c_solid, ρ_solution),\n    (Kshf, Av, Ap),\n    (pch, Tsh) ,\n)\n\nwhere some quantities with Unitful units and some are callables returning quantities See RpFormFit and RampedVariable for convenience types that can help with the callables.\n\nRp(x) with x a length returns mass transfer resistance (as a Unitful quantity)\nK_shf_f(p) with p a pressure returns heat transfer coefficient (as a Unitful quantity).\nTsh(t), pch(t) return shelf temperature and chamber pressure respectively at time t.\n\n\n\n\n\n","category":"function"},{"location":"#Home","page":"Home","title":"Home","text":"","category":"section"},{"location":"#LyoPronto.jl","page":"Home","title":"LyoPronto.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia package providing common computations for pharmaceutical lyophilization.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This relatively small package puts together some convenience functions useful for simulating primary drying in lyophilization.","category":"page"},{"location":"#Dependencies-and-Reexports","page":"Home","title":"Dependencies and Reexports","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"It leverages the strengths of the DifferentialEquations.jl ecosystem to do this quickly and efficiently, although it only actually depends on OrdinaryDiffEqRosenbrock and DiffEqCallbacks, which are both reexported.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Also provided are plot recipes for Plots.jl, although this package only depends on RecipesBase.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Heavy use is made of Unitful.jl, which is reexported.","category":"page"}]
}
